const execa = require('execa');
const fs = require('fs');
const path = require('path');

const mkdir = fs.promises.mkdir;
const writeFile = fs.promises.writeFile;

const cliPath = path.join(__dirname, '..', 'cli.js');

test('--help', async () => {
  const result = await execa.node(cliPath, ['--help']);
  expect(result.exitCode).toBe(0);
  expect(result.stdout).toMatchInlineSnapshot(`
"
  Verify that a command generates files which match existing files on disk

  Verify that a command generates files which match existing files on disk.
  Files matching the path/glob specified by '-p' will be copied with a '.tmp' suffix, then the
  command will be executed, and newly-generated files will be compared with the existing '.tmp'
  files. If a diff is found, then diff-verify will exit with a status code of 1.

  Usage
    $ diff-verify -p <path|glob> [--dry-run] -- <command> [...args]

  Options
    --dry-run   Skip copying, emitting, diffing, and moving files on disk. Only log operations
                which would be done.
    --path, -p  A path or glob specifying the files expected to be generated by the command.

  Examples
    $ diff-verify -p apps/bot-studio-web/graphql-types.ts -- node_modules/.bin/graphql-codegen --config apps/bot-studio-web/codegen.yml

    $ diff-verify -p apps/admin-web/locales -- pnpm run nx -- run admin-web:linguiExtract
"
`);
});

test('exit 0 when generated file unchanged', async () => {
  await writeFile('test/generated.txt', 'hello\nworld');
  const result = await execa.node(cliPath, [
    '-p',
    'test/generated.txt',
    '--',
    'node',
    'test/generate.js',
  ]);
  expect(result.exitCode).toBe(0);
});

test('exit 0 when generated files in folder unchanged', async () => {
  await mkdir('test/generated', { recursive: true });
  await writeFile('test/generated/hello.txt', 'hello');
  await writeFile('test/generated/world.txt', 'world');
  const result = await execa.node(cliPath, [
    '-p',
    'test/generated/**',
    '--',
    'node',
    'test/generate.js',
  ]);
  expect(result.exitCode).toBe(0);
});

test('exit 1 when generated file changed', async () => {
  await writeFile('test/generated.txt', 'hello\ngoodbye');
  expect.assertions(1);
  try {
    await execa.node(cliPath, ['-p', 'test/generated.txt', '--', 'node', 'test/generate.js']);
  } catch (error) {
    expect(error.exitCode).toBe(1);
  }
});

test('exit 1 when generated files in folder changed', async () => {
  await mkdir('test/generated', { recursive: true });
  await writeFile('test/generated/hello.txt', 'foo');
  await writeFile('test/generated/world.txt', 'bar');
  expect.assertions(1);
  try {
    await execa.node(cliPath, ['-p', 'test/generated/**', '--', 'node', 'test/generate.js']);
  } catch (error) {
    expect(error.exitCode).toBe(1);
  }
});
